name: PS1 → EXE (Windows Release)

on:
  push:
    branches: [ "master", "main" ]
    paths:
      - "scripts/**/*.ps1"
      - ".github/workflows/ps1-to-exe-win-release.yml"
  workflow_dispatch:
    inputs:
      script_glob:
        description: Glob of entry scripts
        default: scripts/*.ps1
      gui:
        description: Build as GUI app (no console)
        type: choice
        options: ["false","true"]
        default: "false"
      require_admin:
        description: EXE requires elevation (UAC)
        type: choice
        options: ["false","true"]
        default: "false"
      product_name:
        description: File/Product metadata
        default: WinUtil
      company_name:
        description: Company metadata
        default: "Anthony Walters"
      file_version:
        description: File version (a.b.c.d)
        default: 1.0.0.0
      icon_path:
        description: Optional .ico path
        default: ""

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve tag/version
        id: meta
        shell: pwsh
        run: |
          $shaShort = '${{ github.sha }}'.Substring(0,7)
          $run = '${{ github.run_number }}'
          $tag = "ps1-exe-$run-$shaShort"
          $ver = if ('${{ github.event.inputs.file_version }}') { '${{ github.event.inputs.file_version }}' } else { '1.0.0.0' }
          "tag=$tag"      | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "version=$ver"  | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Tag: $tag  Version: $ver"

      - name: Install PS2EXE
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process Bypass -Force
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module ps2exe -Scope CurrentUser -Force -AllowClobber
          Import-Module ps2exe -Force

      - name: Build EXEs
        shell: pwsh
        env:
          SCRIPT_GLOB: ${{ github.event.inputs.script_glob }}
          GUI: ${{ github.event.inputs.gui }}
          REQUIRE_ADMIN: ${{ github.event.inputs.require_admin }}
          PRODUCT_NAME: ${{ github.event.inputs.product_name }}
          COMPANY_NAME: ${{ github.event.inputs.company_name }}
          FILE_VERSION: ${{ steps.meta.outputs.version }}
          ICON_PATH: ${{ github.event.inputs.icon_path }}
        run: |
          $ErrorActionPreference = 'Stop'
          $glob = if ([string]::IsNullOrWhiteSpace($env:SCRIPT_GLOB)) { 'scripts/*.ps1' } else { $env:SCRIPT_GLOB }

          $outDir = Join-Path $PWD 'dist'
          if (Test-Path $outDir) { Remove-Item $outDir -Recurse -Force }
          New-Item -ItemType Directory -Path $outDir | Out-Null

          $scripts = Get-ChildItem -Path $glob -File -ErrorAction SilentlyContinue |
           Where-Object { $_.Name -notmatch '\.Tests?\.ps1$' }
          if (-not $scripts) { Write-Error "No scripts matched '$glob'"; exit 1 }

          foreach ($s in $scripts) {
            $name = [IO.Path]::GetFileNameWithoutExtension($s.Name)
            $out  = Join-Path $outDir "$name.exe"

            $meta = @{
              Title        = if ($env:PRODUCT_NAME) { $env:PRODUCT_NAME } else { $name }
              Product      = if ($env:PRODUCT_NAME) { $env:PRODUCT_NAME } else { $name }
              Company      = $env:COMPANY_NAME
              FileVersion  = $env:FILE_VERSION
              NoConsole    = ($env:GUI -eq 'true')
              RequireAdmin = ($env:REQUIRE_ADMIN -eq 'true')
              IconFile     = $null
            }

            $jsonPath = "$($s.FullName).json"
            if (Test-Path $jsonPath) {
              try {
                $j = Get-Content $jsonPath -Raw | ConvertFrom-Json
                foreach ($k in 'Title','Product','Company','FileVersion') { if ($j.$k) { $meta[$k] = [string]$j.$k } }
                if ($j.NoConsole -ne $null)    { $meta['NoConsole']    = [bool]$j.NoConsole }
                if ($j.RequireAdmin -ne $null) { $meta['RequireAdmin'] = [bool]$j.RequireAdmin }
                if ($j.IconFile)               { $env:ICON_PATH = [string]$j.IconFile }
              } catch { Write-Warning "Failed to parse $jsonPath; using defaults." }
            }

            if ($env:ICON_PATH -and (Test-Path $env:ICON_PATH)) {
              $meta['IconFile'] = (Resolve-Path $env:ICON_PATH).Path
            }

            $params = @{
              InputFile   = $s.FullName
              OutputFile  = $out
              Title       = $meta.Title
              Product     = $meta.Product
              Company     = $meta.Company
              FileVersion = $meta.FileVersion
            }
            if ($meta.NoConsole)    { $params['NoConsole']    = $true }
            if ($meta.RequireAdmin) { $params['RequireAdmin'] = $true }
            if ($meta.IconFile)     { $params['IconFile']     = $meta.IconFile }

            Write-Host "Building $($s.FullName) → $out"
            Invoke-ps2exe @params
          }

          if (-not (Get-ChildItem $outDir -Filter *.exe)) { Write-Error "No EXEs produced"; exit 1 }
          Get-ChildItem $outDir -File | Format-Table -AutoSize

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: win-exes
          path: dist/*.exe
          if-no-files-found: error

      - name: Zip EXEs
        shell: pwsh
        run: Compress-Archive -Path dist\* -DestinationPath ps1-exes-windows.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:  ${{ steps.meta.outputs.tag }}
          release_name: "PS1→EXE Windows (${{ steps.meta.outputs.tag }})"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ps1-exes-windows.zip
          asset_name: ps1-exes-windows.zip
          asset_content_type: application/zip
